#pragma once
#include "../processor.h"

namespace sel {
	namespace eng {
		namespace proc {

			template<class traits, size_t SZ = traits::input_frame_size>struct dct : public Processor1A1B<SZ, SZ>, virtual public creatable<dct<traits, SZ> >
			{
				static constexpr size_t N = SZ;
				double dctSignal[SZ];
			public:
				virtual const std::string type() const override { return "discrete cosine transform"; }

				void process()
				{
					for (size_t i = 0; i < SZ; i++)
						this->out[i] = dctSignal[i] = this->in[i];


					auto piOverN = M_PI / N;

					for (size_t k = 0; k < SZ; k++)
					{
						double sum = 0.0;
						double kVal = static_cast<double>(k);

						for (size_t n = 0; n < SZ; n++)
						{
							auto tmp = piOverN * (n + 0.5) * kVal;
							sum += dctSignal[n] * cos(tmp);
						}


						this->out[k] = 2 * sum;
					}
				}
				// default constuctor needed for factory creation
				explicit dct() {}

				dct(params& args)
				{
				}

			};
		} // proc
	} // eng
} //sel


#if defined(COMPILE_UNIT_TESTS)
#pragma once
#include "../unit_test.h"

SEL_UNIT_TEST(dct)

class ut_traits : public eng_traits<64, 16000> {};



using dct = sel::eng::proc::dct<ut_traits>;


sel::eng::Const input = std::vector<double>(
	{
		-4911.43080257359, -4648.75282177202, -2049.90893844119, -1941.83692490218,
		-1757.64936335238, -804.438841549709, -735.172838921937, -554.898542043838,
		-542.549799169880, -517.934644663490, -456.347218936102, -424.653394382480,
		-352.079161485175, -343.446646570997, -306.270240885125, -303.642673849313,
		-301.209207465972, -288.778228758572, -230.728361813264, -217.743527148850,
		-194.634938699500, -169.166329820594, -168.551445313991, -153.723394003659,
		-151.230944621563, -146.780147037939, -135.148833700298, -126.693676935488,
		-125.552098064491, -122.704445307867, -120.582494617052, -118.740309356804,
		-117.746385186952, -117.218568438222, -116.583578868798, -110.799421039188,
		-106.892373019838, -105.603222157213, -100.079692464756, -96.1833578542874,
		-94.7379934704439, -93.2463242585609, -93.0786685060479, -92.7785224714423,
		-90.8551296913823, -90.5138921710392, -88.6267757962204, -86.8779026580548,
		-84.2174719564973, -83.5656659635882, -80.0311450839270, -79.2560931323279,
		-75.9927469681787, -75.4177304654045, -75.2733826216122, -74.9360776766520,
		-74.4290610751853, -69.1942449581439, -68.9462387427999, -68.7165676256769,
		-67.8152204254259, -66.9516267299665, -64.2061183905124, -64.1172832722024
	});

std::array<samp_t, dct::N> matlab_dct_result = { {
-3274.73371491323,
-1639.43584594022,
-676.319980873532,
-840.266294822979,
-272.050951870163,
-988.149782818233,
-802.398681969613,
-2186.26956958935,
-2820.11341894166,
-669.844825100955,
-438.842903061811,
-433.632556932153,
-177.817770883278,
-791.213533605918,
-760.029522076779,
-1959.81691343000,
-2038.61218765821,
-254.928732981786,
-230.711250388081,
-175.335872309785,
-72.3088107468162,
-626.457912396053,
-693.149878351606,
-1701.23530216985,
-1553.38708125318,
8.95526612442856,
-25.5423043068143,
29.0802896647475,
47.6102446449019,
-518.268719717262,
-612.901273887728,
-1498.87337671400,
-1173.46357554096,
319.094749259243,
180.498863013522,
226.540680098674,
141.999528105354,
-444.500313411700,
-520.889127259457,
-1310.45099250573,
-790.452298463838,
576.590115501335,
322.545871218757,
360.334551755118,
159.211961481403,
-408.206958144543,
-458.908170018906,
-1170.87074833888,
-500.190308145396,
758.275297083613,
391.806192959794,
420.646110786643,
125.484489772702,
-407.699405172294,
-446.905969176050,
-1097.26961872300,
-265.648229789520,
883.444749314151,
436.130328700333,
449.372124769946,
49.1880662367798,
-438.954820939950,
-458.092407794754,
-1016.98460992790
	} };


void run() {

	dct dct;

	dct.ConnectFrom(input);


	dct.freeze();


	dct.process();

	samp_t* my_dct_result = dct.out;

	// compare matlab psd

	for (size_t i = 0; i < dct::N; ++i) {
		samp_t e = abs(my_dct_result[i] - matlab_dct_result[i]);
		//if (e >= 1e-10)
		// SEL_UNIT_TEST_ASSERT(e < 1e-10);
		// MATLAB uses a differnet formula

	}

}

SEL_UNIT_TEST_END
#endif