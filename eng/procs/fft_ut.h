#pragma once
// fft unit test
#include "fft.h"
#include <iostream>
#include "../unit_test.h"

SEL_UNIT_TEST(fft)

struct ut_traits
{
	static constexpr size_t input_frame_size = 64;
};
using fft = sel::eng::proc::fft_t<ut_traits>;
using ifft = sel::eng::proc::ifft<ut_traits>;


sel::eng::Const input = std::vector<double>(
{ 
		-4911.43080257359, -4648.75282177202, -2049.90893844119, -1941.83692490218,
		-1757.64936335238, -804.438841549709, -735.172838921937, -554.898542043838,
		-542.549799169880, -517.934644663490, -456.347218936102, -424.653394382480,
		-352.079161485175, -343.446646570997, -306.270240885125, -303.642673849313,
		-301.209207465972, -288.778228758572, -230.728361813264, -217.743527148850,
		-194.634938699500, -169.166329820594, -168.551445313991, -153.723394003659,
		-151.230944621563, -146.780147037939, -135.148833700298, -126.693676935488,
		-125.552098064491, -122.704445307867, -120.582494617052, -118.740309356804,
		-117.746385186952, -117.218568438222, -116.583578868798, -110.799421039188,
		-106.892373019838, -105.603222157213, -100.079692464756, -96.1833578542874,
		-94.7379934704439, -93.2463242585609, -93.0786685060479, -92.7785224714423,
		-90.8551296913823, -90.5138921710392, -88.6267757962204, -86.8779026580548,
		-84.2174719564973, -83.5656659635882, -80.0311450839270, -79.2560931323279,
		-75.9927469681787, -75.4177304654045, -75.2733826216122, -74.9360776766520,
		-74.4290610751853, -69.1942449581439, -68.9462387427999, -68.7165676256769,
		-67.8152204254259, -66.9516267299665, -64.2061183905124, -64.1172832722024
});

static constexpr size_t SZ = ut_traits::input_frame_size;

std::array<csamp_t, SZ> matlab_fft_result = { {
		csamp_t(-26197.8697193059, 0.00000000000000),
		csamp_t(-16439.3509432869, -6364.65358836188),
		csamp_t(-12767.1553141995, -7002.93389651327),
		csamp_t(-10816.5394048286, -6722.52404180729),
		csamp_t(-9540.50976596924, -6840.69173047631),
		csamp_t(-8078.77971448977, -6790.91585371869),
		csamp_t(-6929.24134517610, -6472.68374339679),
		csamp_t(-6091.67959448038, -6003.24780745581),
		csamp_t(-5328.90951393644, -5670.81561555180),
		csamp_t(-4589.58675055666, -5091.11487328737),
		csamp_t(-4223.69928206566, -4359.94367754186),
		csamp_t(-4175.24742196536, -3831.27816530205),
		csamp_t(-4196.87530377339, -3509.57008364077),
		csamp_t(-4215.34996926699, -3307.17591547347),
		csamp_t(-4215.66526513541, -3179.94003840826),
		csamp_t(-4244.57812772813, -3128.38291131501),
		csamp_t(-4159.48672412282, -3228.11571227089),
		csamp_t(-3966.20597148335, -3276.49133954968),
		csamp_t(-3743.95743314968, -3298.24086722008),
		csamp_t(-3507.82959626911, -3329.16957185811),
		csamp_t(-3174.95954185510, -3363.33530235525),
		csamp_t(-2745.33861283343, -3293.37892685970),
		csamp_t(-2357.82907506935, -3043.55069940990),
		csamp_t(-2051.93474500213, -2824.44529578492),
		csamp_t(-1683.25175369098, -2526.79562538936),
		csamp_t(-1385.62156709758, -2069.32505435811),
		csamp_t(-1261.84459050205, -1588.65018252464),
		csamp_t(-1214.42154964770, -1136.58523878704),
		csamp_t(-1294.27966378602, -698.985699697075),
		csamp_t(-1497.22001505677, -396.357028426384),
		csamp_t(-1650.61176140684, -260.571847036304),
		csamp_t(-1679.26669419331, -141.911779573440),
		csamp_t(-1679.24762135432, 0.00000000000000),
		csamp_t(-1679.26669419331, 141.911779573440),
		csamp_t(-1650.61176140684, 260.571847036304),
		csamp_t(-1497.22001505677, 396.357028426384),
		csamp_t(-1294.27966378602, 698.985699697075),
		csamp_t(-1214.42154964770, 1136.58523878704),
		csamp_t(-1261.84459050205, 1588.65018252464),
		csamp_t(-1385.62156709758, 2069.32505435811),
		csamp_t(-1683.25175369098, 2526.79562538936),
		csamp_t(-2051.93474500213, 2824.44529578492),
		csamp_t(-2357.82907506935, 3043.55069940990),
		csamp_t(-2745.33861283343, 3293.37892685970),
		csamp_t(-3174.95954185510, 3363.33530235525),
		csamp_t(-3507.82959626911, 3329.16957185811),
		csamp_t(-3743.95743314968, 3298.24086722008),
		csamp_t(-3966.20597148335, 3276.49133954968),
		csamp_t(-4159.48672412282, 3228.11571227089),
		csamp_t(-4244.57812772813, 3128.38291131501),
		csamp_t(-4215.66526513541, 3179.94003840826),
		csamp_t(-4215.34996926699, 3307.17591547347),
		csamp_t(-4196.87530377339, 3509.57008364077),
		csamp_t(-4175.24742196536, 3831.27816530205),
		csamp_t(-4223.69928206566, 4359.94367754186),
		csamp_t(-4589.58675055666, 5091.11487328737),
		csamp_t(-5328.90951393644, 5670.81561555180),
		csamp_t(-6091.67959448038, 6003.24780745581),
		csamp_t(-6929.24134517610, 6472.68374339679),
		csamp_t(-8078.77971448977, 6790.91585371869),
		csamp_t(-9540.50976596924, 6840.69173047631),
		csamp_t(-10816.5394048286, 6722.52404180729),
		csamp_t(-12767.1553141995, 7002.93389651327),
		csamp_t(-16439.3509432869, 6364.65358836188)
	}
};

public:
void run() {

	fft fft;
	fft.ConnectFrom(input);
	fft.freeze();
	fft.process();

	csamp_t *my_fft_result = (csamp_t *)fft.out;

	// compare matlab fft
	for (size_t i = 0; i < SZ; ++i) {
		samp_t e = abs(my_fft_result[i] - matlab_fft_result[i]);
		//if (e >= 1e-10)
		SEL_UNIT_TEST_ASSERT(e < 1e-10);

	}


	ifft ifft;
	ifft.ConnectFrom(fft);
	ifft.freeze();
	ifft.process();

	csamp_t *my_ifft_result = (csamp_t *)ifft.out;

	// compare to input
	for (size_t i = 0; i < SZ; ++i) {
		samp_t e = abs(my_ifft_result[i] - input.at(i));
		//if (e >= 1e-10)
		SEL_UNIT_TEST_ASSERT(e < 1e-10);

	}


}

SEL_UNIT_TEST_END

